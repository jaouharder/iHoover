/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package iHoover;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import iHoover.Robot.Orientation;
import iHoover.Robot.Vecteur;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.TestInstance.Lifecycle;

@TestInstance(Lifecycle.PER_CLASS)
class RobotTest {
	Robot robot;
	Vecteur initialPos;
	int dimx;
	int dimy;
	int x0;
	int y0;

	@BeforeAll
	void init() {
		robot = new Robot();
		dimx = 10; // width of the table
		dimy = 10; // height of the table
		// initial position
		x0 = 5;
		y0 = 5;
		// initiate vector
		initialPos = new Vecteur(x0, y0, Orientation.N);
	}

	@Test
	void afterMovePositionTest() {

		// this test is to move forward one time and certain orientation
		Vecteur v0 = new Vecteur(7, 5, Orientation.N);
		Vecteur expectedV = new Vecteur(7, 6, Orientation.N);

		Vecteur currentPos = new Vecteur(v0.x, v0.y, v0.orientation);
		switch (v0.orientation) {
		case N:
			if (++v0.y < dimx) {
				currentPos.y = v0.y;
				currentPos.x = v0.x;
			}
			break;
		case S:
			if (--v0.y >= 0) {
				currentPos.y = v0.y;
				currentPos.x = v0.x;
			}
			break;
		case W:
			if (--v0.x >= 0) {
				currentPos.y = v0.y;
				currentPos.x = v0.x;
			}
			break;
		case E:
			if (++v0.x < dimx) {
				currentPos.y = v0.y;
				currentPos.x = v0.x;
			}
		}
		assertEquals(currentPos, expectedV);
	}

	@Test
	void afterMovePositionTestTwo() {

		// In this case we test if we are in the edge
		// This example is if we are in the 0 0 and orinted to S, we shouldn't move
		Vecteur v0 = new Vecteur(0, 0, Orientation.S);
		Vecteur expectedV = new Vecteur(0, 0, Orientation.S);

		Vecteur currentPos = new Vecteur(v0.x, v0.y, v0.orientation);
		switch (v0.orientation) {
		case N:
			if (++v0.y < dimx) {
				currentPos.y = v0.y;
				currentPos.x = v0.x;
			}
			break;
		case S:
			if (--v0.y >= 0) {
				currentPos.y = v0.y;
				currentPos.x = v0.x;
			}
			break;
		case W:
			if (--v0.x >= 0) {
				currentPos.y = v0.y;
				currentPos.x = v0.x;
			}
			break;
		case E:
			if (++v0.x < dimx) {
				currentPos.y = v0.y;
				currentPos.x = v0.x;
			}
		}
		assertEquals(currentPos, expectedV);
	}

	@Test
	void IntegrationTest() throws Exception {

		Vecteur result = robot.automatiqueAspirateur(dimx, dimy, initialPos, "DADADADAA");
		Vecteur expectedV = new Vecteur(5, 6, Orientation.N);

		assertEquals(result, expectedV);

		/*
		 * for displaying result as grid O is initial position X is the final position
		 * 
		 */
		for (int y = dimy - 1; y >= 0; y--) {
			for (int x = 0; x < dimx; x++) {
				if (y == y0 && x == x0) {
					System.out.print("|O|");
				} else if (y == result.y && x == result.x) {
					System.out.print("|X|");
				} else {
					System.out.print("|_|");
				}
			}
			System.out.print("\n");
		}
	}
}
